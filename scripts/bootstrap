#!/usr/bin/env bash
#
# `bootstrap` installs things.

set -e

source "$(dirname "$0")"/util.sh

cd "$(dirname "$0")"/..
DOTFILES_ROOT=$(pwd -P)

configure_git() {
  if ! [ -f git/gitconfig.local.symlink ]; then
    info 'Setting up git config…'

    local git_credential='cache'
    if [ "$(uname -s)" == 'Darwin' ]; then
      git_credential='osxkeychain'
    fi

    question 'What is your git author name?'
    edo read -e git_authorname
    question 'What is your git author email?'
    edo read -e git_authoremail

    edo 'sed
      -e "s/AUTHORNAME/$git_authorname/g"
      -e "s/AUTHOREMAIL/$git_authoremail/g"
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g"
      git/gitconfig.local.symlink.example > git/gitconfig.local.symlink'

    success 'Successfully configured git.\n'
  fi
}

link_() {
  local src="$1" dst="$2"

  local overwrite backup skip
  local action

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if (( ! (${overwrite_all:-0} + ${backup_all:-0} + ${skip_all:-0}) )); then
      if [ "$(readlink $dst)" == "$src" ]; then
        skip=1;
      else
        question "File already exists: $(format_url $dst) ($(format_url $(basename "$src"))), what do you want to do?\n${NEWLINE_MARGIN}[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        printf "${NEWLINE_MARGIN}${BCyan}Answer: "
        read -n 1 action
        printf "${Color_Off}\n"

        case "$action" in
          o) overwrite=1 ;;
          O) overwrite_all=1 ;;
          b) backup=1 ;;
          B) backup_all=1 ;;
          s) skip=1 ;;
          S) skip_all=1 ;;
          *) warn "Unknown action, skipping…"; skip=1 ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if (( $overwrite )); then
      edo rm -rf "$dst"
      info $(format_secondary "Deleted $(format_url $dst).")
    fi

    if (( $backup )); then
      edo mv "$dst" "${dst}.backup"
      info $(format_secondary "Backed up $(format_url $dst) to $(format_url "${dst}.backup").")
    fi

    if (( $skip )); then
      trace $(format_secondary "Skipped $(format_url $src).")
      return 0
    fi
  fi

  edo ln -s "$src" "$dst"
  info $(format_secondary "Linked $(format_url $src) to $(format_url $dst).")
}

install_dotfiles() {
  info 'Installing dotfiles…'

  local overwrite_all backup_all skip_all
  local src dst dst_file manual_dst

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"

    try_dst_file() {
      dst_file="${1:?}"
      trace "Looking fo symlink destination file at $(format_url "$dst_file")…"

      # Abort if file doesn't exist
      [ -f "$dst_file" ] || return 1

      manual_dst="$(cat "$dst_file")"
      if [ -z "$manual_dst" ]; then
        warn "Destination file $(format_url "$dst_file") is empty, will use $(format_url "$dst") as fallback"
        manual_dst="$dst"
      else
        manual_dst=$(eval "echo $manual_dst")
      fi
    }

    if try_dst_file "$src.destination"; then
      # `manual_dst` is a file
      dst="$manual_dst"
      trace "Read destination $(format_url "$dst") from $(format_url "$dst_file")"
    elif try_dst_file "$(dirname "$src")/symlinks.destination"; then
      # `manual_dst` is a directory
      dst="$manual_dst/$(basename "${src%.*}")"
      trace "Read destination $(format_url "$dst") from $(format_url "$dst_file")"
    fi

    link_ "$src" "$dst"
  done

  success 'Successfully installed dotfiles.\n'
}

install_dependencies() {
	# If we're on a Mac, let's install and setup homebrew.
	if [ "$(uname -s)" == 'Darwin' ]; then
	  info 'Installing dependencies…'
	  if edo _log_as_info source bin/dot; then
	    success 'Successfully installed dependencies.\n'
	  else
	    die 'Error installing dependencies.'
	  fi
	fi
}

configure_git
install_dotfiles
install_dependencies

success 'All installed!'
